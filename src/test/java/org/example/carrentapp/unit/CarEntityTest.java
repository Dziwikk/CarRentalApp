package org.example.carrentapp.unit;

import org.example.carrentapp.entity.Car;
import org.example.carrentapp.repository.CarRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class CarEntityTest {

    @Mock
    private CarRepository carRepository;  // Mocking the repository

    private Car car;

    @BeforeEach
    void setUp() {
        car = new Car();
        car.setId(1L);
        car.setMake("Toyota");
        car.setModel("Corolla");
        car.setYear(2020);
        car.setAvailable(true);  // The car is available
    }

    @Test
    void testCarEntityMapping() {
        // Mock repository save and return the car entity
        when(carRepository.save(car)).thenReturn(car);

        // Save the car to the repository
        Car savedCar = carRepository.save(car);

        // Test if the entity is saved and retrieved correctly
        assertThat(savedCar).isNotNull();
        assertThat(savedCar.getId()).isEqualTo(1L);
        assertThat(savedCar.getMake()).isEqualTo("Toyota");
        assertThat(savedCar.getModel()).isEqualTo("Corolla");
        assertThat(savedCar.getYear()).isEqualTo(2020);
        assertThat(savedCar.getAvailable()).isTrue();  // Correct assertion using getAvailable() method
    }

    @Test
    void testEntityEquality() {
        // Testing if two instances with same data are equal
        Car anotherCar = new Car();
        anotherCar.setId(1L);
        anotherCar.setMake("Toyota");
        anotherCar.setModel("Corolla");
        anotherCar.setYear(2020);
        anotherCar.setAvailable(true);

        // Car instances should be equal based on the field values
        assertThat(car).isEqualTo(anotherCar);
    }

    @Test
    void testCarEntityNotNullFields() {
        // Test that no fields are null except id (id is generated by the database)
        assertThat(car.getMake()).isNotNull();
        assertThat(car.getModel()).isNotNull();
        assertThat(car.getYear()).isGreaterThan(0);  // Check year is valid
    }
}
