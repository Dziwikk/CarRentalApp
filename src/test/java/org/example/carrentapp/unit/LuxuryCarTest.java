package org.example.carrentapp.unit;

import org.example.carrentapp.entity.LuxuryCar;
import org.example.carrentapp.repository.CarRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;  // Ensure this import is present

@ExtendWith(MockitoExtension.class)
class LuxuryCarTest {

    @Mock
    private CarRepository carRepository;  // Mocking the repository

    private LuxuryCar luxuryCar;

    @BeforeEach
    void setUp() {
        luxuryCar = new LuxuryCar();
        luxuryCar.setId(1L);
        luxuryCar.setMake("BMW");
        luxuryCar.setModel("7 Series");
        luxuryCar.setYear(2022);
        luxuryCar.setAvailable(true);  // The car is available
    }

    @Test
    void testLuxuryCarEntityMapping() {
        // Mock the save method to return the luxuryCar object
        when(carRepository.save(luxuryCar)).thenReturn(luxuryCar);

        // Save the car to the repository (use mock repository)
        LuxuryCar savedCar = carRepository.save(luxuryCar);

        // Test if the entity is saved and retrieved correctly
        assertThat(savedCar).isNotNull();
        assertThat(savedCar.getId()).isEqualTo(1L);
        assertThat(savedCar.getMake()).isEqualTo("BMW");
        assertThat(savedCar.getModel()).isEqualTo("7 Series");
        assertThat(savedCar.getYear()).isEqualTo(2022);
        assertThat(savedCar.getAvailable()).isTrue();
    }

    @Test
    void testEntityEquality() {
        // Testing if two instances with the same data are equal
        LuxuryCar anotherCar = new LuxuryCar();
        anotherCar.setId(1L);
        anotherCar.setMake("BMW");
        anotherCar.setModel("7 Series");
        anotherCar.setYear(2022);
        anotherCar.setAvailable(true);

        // Car instances should be equal based on the field values
        assertThat(luxuryCar).isEqualTo(anotherCar);
    }

    @Test
    void testLuxuryCarEntityNotNullFields() {
        // Test that no fields are null except id (id is generated by the database)
        assertThat(luxuryCar.getMake()).isNotNull();
        assertThat(luxuryCar.getModel()).isNotNull();
        assertThat(luxuryCar.getYear()).isGreaterThan(0);  // Check year is valid
    }
}
