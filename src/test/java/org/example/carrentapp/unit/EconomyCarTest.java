package org.example.carrentapp.unit;

import org.example.carrentapp.entity.EconomyCar;
import org.example.carrentapp.repository.CarRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.when;


import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(MockitoExtension.class)
class EconomyCarTest {

    @Mock
    private CarRepository carRepository;  // Mocking the repository

    private EconomyCar economyCar;

    @BeforeEach
    void setUp() {
        economyCar = new EconomyCar();
        economyCar.setId(1L);
        economyCar.setMake("Toyota");
        economyCar.setModel("Yaris");
        economyCar.setYear(2022);
        economyCar.setAvailable(true);  // The car is available
    }

    @Test
    void testEconomyCarEntityMapping() {
        // Mocking the save method to return the same car object that is passed
        when(carRepository.save(economyCar)).thenReturn(economyCar);

        // Save the car to the repository (use real repository here instead of mock)
        EconomyCar savedCar = (EconomyCar) carRepository.save(economyCar);

        // Test if the entity is saved and retrieved correctly
        assertThat(savedCar).isNotNull();
        assertThat(savedCar.getId()).isEqualTo(1L);
        assertThat(savedCar.getMake()).isEqualTo("Toyota");
        assertThat(savedCar.getModel()).isEqualTo("Yaris");
        assertThat(savedCar.getYear()).isEqualTo(2022);
        assertThat(savedCar.getAvailable()).isTrue();
    }
    @Test
    void testEntityEquality() {
        // Testing if two instances with the same data are equal
        EconomyCar anotherCar = new EconomyCar();
        anotherCar.setId(1L);
        anotherCar.setMake("Toyota");
        anotherCar.setModel("Yaris");
        anotherCar.setYear(2022);
        anotherCar.setAvailable(true);

        // Car instances should be equal based on the field values
        assertThat(economyCar).isEqualTo(anotherCar);
    }

    @Test
    void testEconomyCarEntityNotNullFields() {
        // Test that no fields are null except id (id is generated by the database)
        assertThat(economyCar.getMake()).isNotNull();
        assertThat(economyCar.getModel()).isNotNull();
        assertThat(economyCar.getYear()).isGreaterThan(0);  // Check year is valid
    }
}
